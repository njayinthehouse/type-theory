#+TITLE: Typed Expressions
#+AUTHOR: Nitin John Raj

This chapter extends the language we developed in [[../Syntax-Semantics-Grammar/syntax-semantics-grammar.org][Chapter 2: Syntax, Semantics and Grammar]] with a static type system. The type system itself is trivial, but it provides a foundation upon which we'll build throughout this course.

* Revision: The Language
** Syntax
*** Terms
    t is a metavariable representing terms in the language.

    \[t ::= true\ |\ false\ |\ if\ t\ then\ t\ else\ t\ |\ 0\ |\ succ\ t\ |\ pred\ t\ |\ iszero\ t\]

*** Values
    v is a metavariable representing valid values in the language.

    \[n ::= 0\ |\ succ\ n\]
    \[v ::= true\ |\ false\ |\ n\]

** Semantics
*** Evaluation
    Evaluation of expressions are done using the following rules -

    E-IF_TRUE: \[if\ true\ then\ t_2\ else\ t_3 \to t_2\]

    E-IF_FALSE: \[if\ false\ then\ t_2\ else\ t_3 \to t_3\]

    E-IF: \[\frac{t_1 \to t_1'}{if\ t_1\ then\ t_2\ else\ t_3 \to if\ t_1'\ then\ t_2\ else\ t_3}\]

    E-SUCC: \[\frac{t_0 \to t_0'}{succ\ t_0 \to succ\ t_0'}\]

    E-PRED_ZERO: \[pred\ 0 \to 0\]

    E-PRED_SUCC: \[pred\ (succ\ n_0) \to n_0\]

    E-PRED: \[\frac{t_0 \to t_0'}{pred\ t_0 \to pred\ t_0'}\]

    E-ISZERO_ZERO: \[iszero\ 0 \to true\]

    E-ISZERO_SUCC: \[iszero\ (succ n) \to false\]

    E-ISZERO: \[\frac{t_0 \to t_0'}{iszero\ t_0 \to iszero\ t_0'}\]


* Definition: Typing Relation
  When we say a term t is of type T, we claim that t satisfies all instances of the predefined inference rules that are associated with type T. 

  \[t : T\] or \[t \in T\] are notations expressing that a term t is of type T.

  Also, if \[t \in T\], we can say that t is /well-typed/ or /typable/.

  
* Extended Language Features
** Syntax
*** Datatypes
    T is a metavariable representing datatypes in the language.

    \[T ::= Bool\ |\ Nat\]

** Semantics
*** Type Constraints
    It represents boolean expressions.

    T-TRUE: \[true: Bool\]

    T-FALSE: \[false: Bool\]

    T-IF: \[\frac{t_1: Bool, t_2, t_3: R}{if\ t_1\ then\ t_2\ else\ t_3: R}\]

    T-ZERO: \[0: Nat\]

    T-SUCC: \[\frac{t_0: Nat}{succ\ t_0: Nat}\]

    T-PRED: \[\frac{t_0: Nat}{pred\ t_0: Nat}\]

    T-ISZERO: \[\frac{t_0: Nat}{iszero\ t_0: Bool}\]


* Lemma: Inversion of the Typing Relation
  The lemma is evident from the definition of the typing relation defined for our language.

  1. \[true \in R \implies R = Bool\]

  2. \[false \in R \implies R = Bool\]

  3. \[if\ t_1\ then\ t_2\ else\ t_3 \in R \implies (t_1 \in Bool) \wedge (t_2, t_3 \in R)\]

  4. \[0 \in R \implies R = Nat\]

  5. \[succ\ t_1 \in R \implies (R = Nat) \wedge (t_1 \in Nat)\]

  6. \[pred\ t_1 \in R \implies (R = Nat) \wedge (t_1 \in Nat)\]

  7. \[iszero\ t_1 \in R \implies (R = Bool) \wedge (t_1 \in Nat)\]


* Theorem: Uniqueness of Types
  Each term t has exactly one type, and there can only be one distinct derivation tree of this typing for a term.

  Proof:
  Structural induction on t using the inversion lemma


* Safety of a Type System
  This is the concept which states that /a well-typed term will not get stuck/.

  We prove this in two step:

  1. Progress
     - /A well typed term is not stuck./
     - It's either a value or it can be evaluated in one step.
       
  2. Preservation
     - /The result of one-step evaluation on a well-typed term is also well-typed./


* Lemma: Canonical Forms
  1. \[v \in Bool \implies (v = true) \vee (v = false)\]
  2. \[v \in Nat \implies (v = 0) \vee (v = succ\ n, where\ n \in Nat)\]


* Theorem: Progress
  \[\forall t \exists T (t: T \implies isValue\ t\ \vee \exists t' (t \to t'))\]
  (Prove by induction over the derivation of \[t : T\])


* Theorem: Preservation
  \[t: T \wedge t \to t' \implies t': T\]
  (Prove by induction over the derivation of \[t : T\])
       

* Exercises
** DONE Prove that every subterm of a well-typed term is well typed.
   Consider a term t.

   Case 1: t = true, false, 0
   - t has no subterms, and t is well-typed 
     - By inversion lemma, true: Boolean, false: Bool, 0: Nat

   Case 2: t = if t1 then t2 else t3
   - Let us assume t is well typed as R.
   - Through inversion lemma, we know that t1: Bool, t2: R and t3: R.
   - Thus, its subterms are well-typed.

   Case 3: t = succ t1
   - Let us assume that t is well typed as R.
   - Through inversion lemma, we know that t1 is well-typed as Nat.
   - Thus, its subterms are well-typed.

   Case 4: t = pred t1
   - Let us assume that t is well typed as R.
   - Through inversion lemma, we know that t1 is well-typed as Nat.
   - Thus, its subterms are well-typed.

   Case 5: t = iszero t1
   - Let us assume that t is well typed as R.
   - Through inversion lemma, we know that t1 is well-typed as Nat.
   - Thus, its subterms are well-typed.

   Thus, in our language, if a term is well-typed, so are its subterms.

** DONE Derive the preservation theorem using induction on evaluation rules.
   Consider t, t' such that \[t \to t'\]. Also, let t: T.

   Case 1: \[t \to t'\] is of the form E-IF_TRUE
   - Then t is of the form `if true then t2 else t3`, t' = t2
   - By T-IF, type(t) = type(t'), thus t': T

   Case 2: \[t \to t'\] is of the form E-IF_FALSE
   - Then t is of the form `if false then t2 else t3`, t' = t3
   - By T-IF, type(t) = type(t'), thus t': T

   Case 3: \[t \to t'\] is of the form E-IF
   - Then t is of the form `if t1 then t2 else t3`, where \[t1 \to t1'\], and t' = if t1' then t2 else t3.
   - By inversion lemma on t, t1: Bool, t2: T and t3: T.
   - By our induction hypothesis, t1': Bool
   - By definition of our typing rules on t', t1 and t2, t': T

   Case 4: \[t \to t'\] is of the form E-SUCC
   - Then t is of the form `succ t1`, where \[t1 \to t1'\], and t' = succ t1'
   - By our language semantics, t: Nat if t1: Nat. Since t is well typed, we can assume that this is true.
   - By our induction hypothesis on t1, t1': Nat
   - By definition of our typing rules on t1', t': Nat

   Case 5: \[t \to t'\] is of the form E-PRED_ZERO
   - Then t = pred 0 and t' = 0
   - Then t: Nat, t': Nat

   Case 6: \[t \to t'\] is of the form E-PRED_SUCC
   - Then t is of the form `pred (succ t1)`, t' = t1
   - If t is well typed, T = Nat.
   - Since subterms are well-typed, succ t1 is also well typed, and thus succ t1: Nat.
   - Bt inversion lemma on succ t1, t1: nat. Thus t': Nat

   Case 7: \[t \to t'\] is of the form E-PRED
   - Then t is of the form `pred t1`, where \[t1 \to t1'\], and t' = pred t1'
   - By our language semantics, t: Nat if t1: Nat. Since t is well typed, we can assume that this is true.
   - By our induction hypothesis on t1, t1': Nat
   - By definition of our typing rules on t1', t': Nat

   Case 8: \[t \to t'\] is of the form E-ISZERO_ZERO
   - Then t = iszero 0 and t' = true
   - By defition of our language on iszero 0, T = Bool
   - By definition of our language on true, t': Bool

   Case 9: \[t \to t'\] is of the form E-ISZERO_SUCC
   - Then t = iszero (succ t1) and t' = false
   - By defition of our language on `iszero t2`, T = Bool
   - By definition of our language on false, t': Bool

   Case 10: \[t \to t'\] is of the form E-ISZERO
   - Then t is of the form `iszero t1`, where \[t1 \to t1'\], and t' = iszero t1'
   - By our language semantics, t: Bool if t1: Nat. Since t is well typed, we can assume that this is true.
   - By our induction hypothesis on t1, t1': Nat
   - By definition of our typing rules on t1', t': Bool

** DONE Evaluation rule E-PRED_ZERO seems unintuitive. It might be better to leave the predecessor of 0 undefined. Can we achieve this by removing the rule?
   No, removing the rule will just make terms of the form `pred 0` normal, yet not values of our language. Thus, evaluation might get stuck.

** DONE Prove or disprove: \[t \to t' \wedge t': T \implies t: T\]
   This may not always be true.

   For example, we might have t = if true then 0 else false. Here, t' = 0, thus t': Nat. However, t is not well typed.
