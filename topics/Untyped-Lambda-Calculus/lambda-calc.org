#+TITLE: Lambda Calculus Evaluator
#+AUTHOR: Nitin John Raj

In this chapter, we'll try to implement an evaluator for lambda calculus. This is /not/ the de Brujin implementation. The strategy we use for evaluation is call by value.

* Concrete Syntax
** Variable Identifiers
*** Documentation 
    Valid variable identifiers are represented by metavariable x. Let's make the following assumption:

    \[x \in \{a..z\} \cup \{A..Z\}\]

*** Code
#+NAME: identifiers
#+BEGIN_SRC haskell
  validIdentifiers :: Set Char
  validIdentifiers = fromList (['a'..'z'] ++ ['A'..'Z'])
#+END_SRC

** Terms
*** Documentation
    The concrete syntax is represented by metavariable t. 

    t := x
         t t
         \x. t


* Abstract Syntax
** Documentation
   The abstract syntax is represented by metavariable a. Valid variable identifiers are still represented by x.

   a := Variable x
        Lambda x a
	Application a a

** Code
#+NAME: ast
#+BEGIN_SRC haskell
  data Ast = Variable Char
           | Lambda Char Ast
           | Application Ast Ast
           deriving (Eq, Show)

  (\-) :: Char -> Ast -> Ast
  (\-) x t = Lambda x t

  (*) :: Ast -> Ast -> Ast
  (*) t1 t2 = Application t1 t2

  var :: Char -> Ast
  var x = Variable x
#+END_SRC


* Parser
  The parser hasn't been implemented yet. It is not relevant to the content of this course.


* Values
** Documentation
   Values in lambda calculus are represnted by metavariable v.

   v := x |
        \x. t

** Code
#+NAME: isvalue
#+BEGIN_SRC haskell
  isValue :: Ast -> Bool
  isValue (Variable _) = True
  isValue (Lambda _ _) = True
  isValue (Application (Lambda _ _) _) = False
  isValue (Application t1 t2) = (isValue t1) && (isValue t2)
#+END_SRC


* Free Variables
** Documentation
   A free variable is one which is not bound by an abstraction. 

   Let \[\Lambda\] be the set of all terms in lambda calculus. Let FV be a function which gets all free variables in a term.

   \[FV: \Lambda \to Set[Char]\]
   \[FV(x) = \{x\}\]
   \[FV(\lambda x.\ t) = FV(t) - \{x\}\]
   \[FV(t_1\ t_2) = FV(t_1) \cup FV(t_2)\]

** Code
#+NAME: free-variables
#+BEGIN_SRC haskell
  fv :: Ast -> Set Char
  fv (Variable x) = singleton x
  fv (Lambda x t) = delete x (fv t)
  fv (Application x y) = (fv x) `union` (fv y)
#+END_SRC


* Substitution
** Documentation
   The operational semantics of substitution written in single-step semantics:

   S-VAR_1: \[[x \mapsto s]x \to s\]

   S-VAR_2: \[[x \mapsto s]y \to y\]
   
   S-ABS_1: \[[x \mapsto s]\lambda x.\ t \to \lambda x.\ t\]

   S-ABS_2: \[[x \mapsto s]\lambda y.\ t \to \lambda y.\ [x \mapsto s]t\], \[y \notin FV(s)\]

   S-ABS_3: \[[x \mapsto s]\lambda y.\ t \to [x \mapsto s]\lambda z.\ [y \mapsto z]t\], \[y \in FV(s)\], \[z \notin FV(s) \cup FV(t)\]

   S-APP: \[[x \mapsto s](t_1\ t_2) \to [x \mapsto s]t_1\ [x \mapsto s]t_2\]

** Code
#+NAME: substitution
#+BEGIN_SRC haskell
  data Substitution = Sub Ast Ast

  (->:) :: Ast -> Ast -> Substitution
  (->:) x y = Sub x y

  toChar :: Ast -> Char
  toChar (Variable x) = x
  toChar _ = error "Cannot convert nonvariable to Char!"

  (|-) :: Substitution -> Ast -> Ast
  (|-) (Sub x s) (Variable a) | b == a = s
                              | otherwise = var b
    where b = toChar x
          
  (|-) (Sub x s) (Lambda y t) | a == y = (\-) y t
                              | y `notMember` (fv s) = (\-) y ((x ->: s) |- t)
                              | otherwise = (x ->: s) |- (((\-) y t) `alpha` z)
    where a = toChar x
          z = findMin (validIdentifiers \\ ((fv s) `union` (fv t)))
          
  (|-) (Sub x s) (Application t1 t2) = let q = x ->: s
                                       in (q |- t1) * (q |- t2)
#+END_SRC


* \[\alpha\]-Conversion
** Documentation
   Two abstractions \[\lambda x.\ t\] and \[\lambda y.\ s\] are said to be \[\alpha\]-equivalent if \[[x \mapsto y]t = s\]
   Alpha conversion can be defined as:
   
   \[\alpha: \Lambda * V \to \Lambda\]
   \[\alpha(\lambda x.\ t, y) = \lambda y.\ [x \mapsto y]t\]
   where \[\Lambda\] is the set of all abstractions,
         V is the set of all valid identifiers.

** Code
#+NAME: alpha
#+BEGIN_SRC haskell
  alpha :: Ast -> Char -> Ast
  alpha (Lambda a t) b = let x = var a
                             y = var b
                         in (\-) b ((x ->: y)|- t)
  alpha _ _ = error "Alpha conversion on nonabstraction!"
#+END_SRC


* \[\beta\]-Reduction
** Documentation
   Beta reduction is a reduction of an abstraction applied to another term. The operation is defined as follows:

   \[\beta: T \to T\]
   \[\beta((\lambda x.\ t_{1,2})\ t_2) = [x \mapsto t_2]t_{1,2}\]
   where T is set of all applications of abstractions to terms.

** Code
#+NAME: beta
#+BEGIN_SRC haskell
  beta :: Ast -> Ast
  beta (Application (Lambda a t) s) = let x = var a
                                      in (x ->: s)|- t
#+END_SRC


* Evaluation by Call-by-Value
** Documentation
   The call-by-value strategy of lambda calculus evaluation is an applicative order strategy define by the following rules:

   E-APP_1: \[\frac{t_1 \to t_1'}{t_1\ t_2 \to t'_1\ t_2}\]

   E-APP_2: \[\frac{t_2 \to t_2'}{v_1\ t_2 \to v_1\ t'_2}\]

   E-APP_ABS: \[(\lambda x.\ t)\ y \to [x \mapsto y]t\]

   It basically defines an order of predence for evaluation of a term under beta reduction.

** Code
#+NAME: evaluation
#+BEGIN_SRC haskell
  eval :: Ast -> Ast
  eval (Application t1 t2) | not (isValue t1) = eval ((eval t1) * t2)
                           | not (isValue t2) = eval (t1 * (eval t2))
                           | otherwise = case t1 of
                                           Lambda _ _ -> eval (beta (t1 * t2))
                                           _ -> t1 * t2
  eval ast = ast
#+END_SRC


* Putting it Together
** Lambda Calculus Module
*** Preamble
#+NAME: preamble
#+BEGIN_SRC haskell
  module Lambda (isValue, fv, (->:), (|-), alpha, beta, eval)
  where

  import Prelude hiding ((*))
  import Data.Set
#+END_SRC

*** Tangle
#+NAME: lambda-calc
#+BEGIN_SRC haskell :eval no :noweb yes :tangle Lambda.hs
<<preamble>>

<<identifiers>>

<<ast>>

<<isvalue>>

<<free-variables>>

<<substitution>>

<<alpha>> 

<<beta>>

<<evaluation>>
#+END_SRC

