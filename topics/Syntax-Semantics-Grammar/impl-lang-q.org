#+TITLE: An Implementation of Language Q''
#+AUTHOR: Nitin John Raj

This chapter focuses on a Haskell implementation of language Q'' from the chapter [[./syntax-semantics-grammar.org][Syntax, Semantics and Grammar]].

* Concrete Syntax
** Documentation
  The concrete syntax of the language looks like this:
  
  <term> := true |
            false |
	    0 |
 	    if <term> then <term> else <term> |
 	    succ <term> |
	    pred <term> |
	    iszero <term> | 
	    error


* Abstract Syntax
** Documentation
   The abstract syntax is represented below:

   <ast> := TRUE |
            FALSE |
	    ZERO |
	    IfThenElse <ast> <ast> <ast> |
	    Succ <ast> |
	    Pred <ast> |
	    IsZero <ast> | 
	    ERROR

** Code
#+NAME: ast
#+BEGIN_SRC haskell
  data Ast = TRUE
           | FALSE
           | ZERO
           | IfThenElse Ast Ast Ast
           | Succ Ast
           | Pred Ast
           | IsZero Ast
           | ERROR
           deriving Show
#+END_SRC


* Parser
  For now, my implementation of the language has no parser. I plan on building it later using the parsec library. The parser itself contains no concepts relevant to this course.


* Values
** Documentation
   The following are defined values in this language:

   <number> := 0 | succ <number>
   <value> := true | false | <number>

** Code
#+NAME: isvalue
#+BEGIN_SRC haskell
  isValue :: Ast -> Bool
  isValue TRUE = True
  isValue FALSE = True
  isValue ZERO = True
  isValue ERROR = True
  isValue (Succ n) = isNumVal n
  isValue t = False

  isNumVal :: Ast -> Bool
  isNumVal ZERO = True
  isNumVal (Succ n) = isNumVal n
  isNumVal t = False
#+END_SRC


* Semantics of Evaluation
** Documentation 
   The operational semantics of the evaluation of this language can be written in single-step notation. Here, all \[t_i\] represent terms and \[v_i\] represent values. \[n_i\] represents a numerical value.

   E-IF_TRUE: \[if\ true\ then\ t_1\ else\ t_2 \to t_1\]

   E-IF_FALSE: \[if\ false\ then\ t_1\ else\ t_2 \to t_2\]

   E-IF: \[\frac{t_1 \to t_1'}{if\ t_1\ then\ t_2\ else\ t_3 \to if\ t_1'\ then\ t_2\ else\ t_3}\]

   ERR-IF: \[\frac{v_1 \notin \{true, false\}}{if\ v_1\ then\ t_2\ else\ t_3 \to error}\]

   E-SUCC: \[\frac{t_1 \to t'_1}{succ\ t_1 \to succ\ t_1'}\]

   ERR-SUCC: \[\frac{v_i \notin \{0, succ\ x\}}{succ\ v_i \to error}\]

   E-PRED_SUCC: \[pred\ succ\ t_1\ \to t_1\]

   E-PRED_ZERO: \[pred\ 0 \to 0\]

   E-PRED: \[\frac{t_1 \to t'_1}{pred\ t_1 \to pred\ t'_1}\]

   ERR-PRED: \[\frac{v_1 \notin \{0, succ\ x\}}{pred\ v_1 \to error}\]

   E-ISZERO_SUCC: \[iszero\ succ\ n \to false\]

   E-ISZERO_ZERO: \[iszero\ 0 \to true\]

   E-ISZERO: \[\frac{t_1 \to t_1'}{iszero\ t_1 \to iszero t_1'}\]

   ERR-ISZERO: \[\frac{v_1 \notin \{0, succ\ x\}}{iszero\ v_1 \to error}\]

** Code
#+NAME: evaluation
#+BEGIN_SRC haskell
  eval :: Ast -> Ast
  eval TRUE = TRUE
  eval FALSE = FALSE
  eval ZERO = ZERO
  eval (IfThenElse TRUE t2 t3) = eval t2
  eval (IfThenElse FALSE t2 t3) = eval t3
  eval (IfThenElse t1 t2 t3) = if (isValue t1)
                               then ERROR
                               else eval (IfThenElse (eval t1) t2 t3)
  eval (Succ t) | isNumVal t = Succ t
                | isValue t = ERROR
                | otherwise = eval (Succ (eval t))
  eval (Pred (Succ t)) =  eval t
  eval (Pred ZERO) = ZERO
  eval (Pred t) | isValue t = ERROR
                | otherwise = eval (Pred (eval t))
  eval (IsZero ZERO) = TRUE
  eval (IsZero (Succ t)) | isNumVal t = FALSE
                         | otherwise = eval (IsZero (eval (Succ t)))
  eval (IsZero t) | isValue t = ERROR
                  | otherwise = eval (IsZero (eval t))
  eval t = ERROR
#+END_SRC


* Putting it Together
** Preamble
#+NAME: preamble
#+BEGIN_SRC haskell
  module Evaluator where
#+END_SRC

** Code Tangling
#+NAME: evaluator
#+BEGIN_SRC haskell :eval no :noweb yes :tangle code.hs
<<preamble>>

<<ast>>

<<isvalue>>

<<evaluation>>
#+END_SRC
