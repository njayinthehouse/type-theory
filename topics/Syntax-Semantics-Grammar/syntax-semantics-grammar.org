#+TITLE: Syntax, Semantics and Grammar
#+AUTHOR: Nitin John Raj

* Syntax
  Syntax is the set of grammatical rules that a language follows.
  To elucidate this concept, let's define a quick untyped language and observe the different ways of expressing its syntax.

** Definition, by Context Free Grammar
 \[t ::=\]
      \[true\] (constant true)
      \[false\] (constant false)
      \[if \hspace{1mm} t \hspace{1mm} then \hspace{1mm} t \hspace{1mm} else \hspace{1mm} t\] (conditional)
      \[0\] (constant 0)
      \[succ \hspace{1mm} t\] (successor)
      \[pred \hspace{1mm} t\] (predecessor)
      \[iszero \hspace{1mm} t\] (zero test)

 The conventions used in this grammar is similar to the Backus-Naur Form of expressing grammars. Let's explain how this works.

 Here, \[t\] is a /metavariable/ representing a /term/ of the language. \[t\] can be replaced by any of the expressions following it. Note that some of the right hand expressions also contain metavariable \[t\], which can be replaced even within those expressions according to the same rules. 

 Let's define this language more rigorously.

** Definition, by Induction: Terms
   1. \[\{true, false, 0\} \subseteq T\]

   2. if \[t_1 \in T\] then \[\{succ\ t_1, pred\ t_1, iszero\ t_1\} \subseteq T\]

   3. if \[t_1, t_2, t_3 \in T\] then \[(if\ t_1\ then\ t_2\ else\ t_3) \in T\]

** Definition, by Inference Rules: Terms
   1. \[true \in T\]

   2. \[false \in T\]

   3. \[0 \in T\]

   4. \[\frac{t_1 \in T}{succ\ t_1 \in T}\]

   5. \[\frac{t_1 \in T}{pred\ t_1 \in T}\]

   6. \[\frac{t_1 \in T}{iszero\ t_1 \in T}\]

   7. \[\frac{t_1 \in T\ \ t_2 \in T\ \ t_3 \in T}{if\ t_1\ then\ t_2\ else\ t_3 \in T}\]

   (Note: It is implicitly understood that \[T\] is the smallest set that abides by these rules.)

** Concrete Definition: Terms
   1. \[S_0 = \phi\]
  
   2. \[S_{i + 1} = \{true, false, 0\} \cup \{succ\ t_1, pred\ t_1, iszero\ t_1\ |\ t_1 \in S_i\} \cup \{if\ t_1\ then\ t_2\ else\ t_3\ |\ t_1, t_2, t_3 \in S_i\}\]

   3. \[S = \bigcup\limits_{i} S_i\]

** Prove: \[T = S\]
   Let the definition by inference rules of the terms be \[p\] and the concrete definition be \[q\].

   /First, let's show that \[p(S)\] is true./
  
   \[S_1 = \{true, false, 0\}\], thus the first 3 rules of \[p\] hold for \[S_0\].
   \[\therefore p_{1,2,3}(S)\] is true.

   Now consider \[t_1 \in S\].
   But if \[t_1 \in S\], from \[q_3\], we can say that \[\exists k \in \mathbb{N}\ (t_1 \in S_k)\].
   From \[q_2\], \[S_{k + 1} = \{true, false, 0\} \cup \{succ\ t_1, pred\ t_1, iszero\ t_1\ |\ t_1 \in S_k\} \cup \{if\ t_1\ then\ t_2\ else\ t_3\ |\ t_1, t_2, t_3 \in S_k\}\].
   But \[S_{k+1} \subseteq S\].
   \[\therefore p_{4,5,6,7}(S)\] is true.

   \[\therefore p(S)\] is true.

   /Now, we just need to prove that \[S\] is the smallest set that obeys these rules./
   If this is true, then \[\forall S'\ (p(S') \implies S \subseteq S')\].

   Consider \[S_j \in S'\ |\ j < i\] for some i.

   Case 1: \[i = 0\]
     \[S_j = S_0 = \phi\]
     But trivially, \[\phi \subseteq S'\]
     \[\therefore S_0 \subseteq S'\]

   Case 2: \[i > 0\]
     Let \[i = j + 1\].
     For \[S_{j + 1}\], \[q_2\] applies.
     Consider \[t_0 \in S_{j + 1}\]

     Subcase 1: \[t_0\] is constant.
       Then by \[p_{1, 2, 3}\], \[t_0 \in S'\].
	
     Subcase 2: \[t_0\] is of the form \[succ\ t_1\], \[pred\ t_1\] or \[iszero\ t_1\]
       Then \[t_1 \in S_j\].
       By our induction hypothesis, \[t_1 \in S'\]
       \[\therefore\], by \[p_{4,5,6}\], \[t_0 \in S'\]

     Subcase 3: \[t_0\] is of the form \[if\ t_1\ then\ t_2\ else\ t_3\]
       Similar to subcase 2, \[t_0 \in S'\]

   Thus, we prove that in all subcases, \[t_0 \in S_{j + 1} \implies t_0 \in S'\].

   Thus, we prove that \[\forall i > 0\ (S_j \subseteq S')\]
   But \[S = \bigcup\limits_i S_i\]
   \[\therefore S \subseteq S'\]

   \[\therefore\ S\] is the smallest set that satisfies \[p\].

   \[\therefore\ S = T\]


* Induction on Terms
  By induction on terms, we can define many useful functions.

** Set of Constants in a Term
   
   \[Consts: T \to \{true, false, 0\}\]
   \[Consts(true) = \{true\}\]
   \[Consts(false) = \{false\}\]
   \[Consts(0) = \{0\}\]
   \[Consts(succ\ t_0) = Consts(t_0)\]
   \[Consts(pred\ t_0) = Consts(t_0)\]
   \[Consts(iszero\ t_0) = Consts(t_0)\]
   \[Consts(if\ t_1\ then\ t_2\ else\ t_3) = Consts(t_1) \cup Consts(t_2) \cup Consts(t_3)\]

** Size of a Term

   The number of nodes in its abstract syntax tree.
   \[size: T \to \mathbb{N}\]
   \[size(true) = 1\]
   \[size(false) = 1\]
   \[size(0) = 1\]
   \[size(succ\ t_0) = 1 + size(t_0)\]
   \[size(pred\ t_0) = 1 + size(t_0)\]
   \[size(iszero\ t_0) = 1 + size(t_0)\]
   \[size(if\ t_1\ then\ t_2\ else\ t_3) = 1 + size(t_1) + size(t_2) + size(t_3)\]

** Depth of a Term

   The maximum depth of its abstract syntax tree.
   \[depth: T \to \mathbb{N}\]
   \[depth(true) = 1\]
   \[depth(false) = 1\]
   \[depth(0) = 1\]
   \[depth(succ\ t_0) = 1 + depth(t_0)\]
   \[depth(pred\ t_0) = 1 + depth(t_0)\]
   \[depth(iszero\ t_0) = 1 + depth(t_0)\]
   \[depth(if\ t_1\ then\ t_2\ else\ t_3) = 1 + max(depth(t_1), depth(t_2), depth(t_3))\]    

** Theorem: Principle of Induction on Terms

   If \[P: T \to \{TRUE, FALSE\}\]

   1. Induction on Depth:
      \[\forall r, s \in T \hspace{1mm} (P(r) \wedge depth(r) < depth(s) \implies P(s))\]

   2. Induction on Size:
      \[\forall r, s \in T \hspace{1mm} (P(r) \wedge size(r) < size(s) \implies P(s))\]

   3. Structural Induction:
      \[\forall r, s \in T \hspace{1mm} (P(r) \wedge (r\] is a subterm of \[s) \implies P(s))\]


* Semantics
  Semantics define the meaning of the terms of a language.

** Types of Semantics
   The meaning of a language can be defined using different types of semantics.

   1. Operational Semantics:
      - Expressed via abstract state machines[fn:1]
      
   2. Denotational Semantics:
      - Expressed at a higher level of abstraction using mathematical objects

   3. Axiomatic Semantics:
      - Defined via a set of logical laws

   Pierce has used operational semantics for his book, so we'll be sticking to those for the purpose of this tutorial. Operational semantics is highly used today, as the other two abstract semantic forms were found to have problems with representation. See the tangential topics for more information on those.

** Values
   Some terms of a language are recognized to be valid output statements of the language. These terms are called values.

** Inference Rules
   In operational semantics, inference rules help define how to evaluate terms of a language.

** Normal Form
   A term is said to be in normal form if there is no rule in the defined set of inference rules that can evaluate it.

** Instance of an Inference Rule
   Given a rule r and a term t, the term obtained by continuously applying r to t is called an instance of rule r.

** Satisfaction of an Inference Rule
   An inference rule is satisfied by a relation if, for each instance of the rule, either the conclusion is is in the relation or one of the premises is not.

** One-Step Evaluation
   The smallest relation that satisfies a set of inference rules R is called a one-step evaluation relation. One-step evaluation relations are one way of defining inference rules. Using one-step evaluation, we can create a /derivation tree/ which serves to evaluate a term.

** Multi-Step Evaluation 
   This is the reflexive, transitive closure on one-step evaluation:

   1. \[\frac{u \to v}{u \to^* v}\]

   2. \[t \to^* t\]

   3. \[\frac{p \to^* q,\ q \to^* r}{p \to^* r}\]

** Stuck
   A term is said to be stuck if it is in normal form but is not a value.

** Big-Step Evaluation
   A set of rules which define how to completely reduce a term in one step.


* Examples of Evaluation
  Let's define a few language similar to the one we defined when learning what syntax is. For these language, we need to define:
  - a set of valid expressions
  - a set of valid end values
  - a means of reducing non-value terms

** Language Q
   The first language will only deal in boolean expressions.

*** Syntax
    Here, \[t\] is the metavariable representing valid terms, and \[v\] represents valid end states.
    
    \[t ::= true\ |\ false\ |\ if\ t\ then\ t\ else\ t\]
    \[v ::= true\ |\ false\]

*** Semantics
    We shall be using one-step operational semantics.

    E-IF_TRUE:  \[if\ true\ then\ t_1\ else\ t_2\ \to t_1\]

    E-IF_FALSE: \[if\ false\ then\ t_1\ else\ t_2 \to t_2\]

    E-IF:       \[\frac{t_1 \to t_1'}{if\ t_1\ then\ t_2\ else\ t_3 \to if\ t_1'\ then\ t_2\ else\ t_3}\]

*** A Deeper Look
    
    There are many points of interest here. What the inference rules say are fairly straightforward:
    1. E-IF_TRUE says that if the first subterm is true, then the second subterm is the return value.
    2. E-IF_FALSE says that if the first subterm is false, then the third subterm is the return value.
    3. E-IF says that if the first subterm \[t_1\] can be reduced to \[t_1'\], then the first subterm must be reduced for further evaluation.

    Note that there is no rule for reducing the second and third subterms within a term of type \[if\ t\ then\ t\ else\ t\]. E-IF allows the first subterm to be reduced, but the second and third are untouched.

    Thus, the rules help devise an /evaluation strategy/, or an /order of precedence/ of evaluation. 

*** Example: Instance of an Inference Rule
    \[if\ true\ then\ true\ else\ (if\ false\ then\ false\ else\ false) \to true\]
    is an instance of E-IF_TRUE on term \[if\ true\ then\ true\ else\ (if\ false\ then\ false\ else\ false)\].
    
*** Example: Derivation Tree of a Term
    Consider:
    \[s := if\ true\ then\ false\ else\ false\]
    \[t := if\ s\ then\ true\ else\ true\]
    \[u := if\ false\ then\ true\ else\ true\]

    Then derivation tree of \[if\ t\ then\ false\ else\ false \to if\ u\ then\ false\ else\ false\] is like:
    \[\frac{\frac{(E-IF\_TRUE)\ s \to false}{(E-IF)\ t \to u}}{(E-IF)\ if\ t\ then\ false\ else\ false \to if\ u\ then\ false\ else\ false}\]

*** Theorem 1: Determinacy of One-Step Evaluation
    \[\frac{u \to v, u \to w}{v = w}\]

    *Proof*:
    
    Consider term t. Let us reduce t via one-step evaluation using the rules defined by language Q. We also know that \[\exists u, v \in T\ (t \to u \wedge t \to v)\]

    Case 1: t is of the form \[if\ true\ then\ p\ else\ q\], where p and q are terms.
      - Then t evaluates to p under E-IF_TRUE.
      - No other inference rule applies to t in this form.
      - Thus, \[u = v = p\]

    Case 2: t is of the form \[if\ false\ then\ p\ else\ q\], where p and q are terms.
      - Then t evaluates to q under E-IF_FALSE.
      - No other inference rule applies to t in this form.
      - Thus, \[u = v = q\]

    Case 3: t is of the form \[if\ r\ then\ p\ else\ q\], where p, q and r are terms and \[r \to r'\].
      - Then t evaluates to \[if\ r'\ then\ p\ else\ q\] under E-IF.
      - We know that \[r \to r'\] follows one of the three cases. 
      - No other inference rule applies to t in this form.
      - Thus, \[u = v = if\ r'\ then\ p\ else\ q\]

    Thus, in all cases, \[u = v\], Thus, one-step evaluation in language Q is deterministic.

*** Theorem 2: Every value is in normal form.
    *Proof*:
    There is no rule to evaluate terms of the form \[true\] or terms of the form \[false\]. Thus, every value in Q is in normal form.

*** Theorem 3: If t is in normal form, then t is a value.
    *Proof*:
    If t is \[true\] or \[false\], then t is in normal form (there are no rules to evaluate it) and t is a value, so our premise holds.
    
    If t is of the form \[if\ p\ then\ q\ else\ r\], then t can be evaluated by:
    - E-IF_TRUE when \[p = true\]
    - E-IF_FALSE when \[p = false\]
    - E-IF when p is not a value. (By our induction hypothesis, p is not in normal form.)

*** Theorem 4: Uniqueness of Normal Forms
    \[\frac{u\ and\ v\ are\ in\ normal\ form, t \to^* u, t \to^* v}{u = v}\]

    *Proof*:
    This is proved by the determinacy of one-step evaluation. Thus, if \[t \to^* u\] and \[t \to^* v\], then it implies that either \[u \to^* v\] or \[v \to^* u\]. 

    Case 1: \[u \to^* v\]
      - Either u reduces to v or \[u = v\].
      - But u is in normal form. Thus, u cannot be reduced.
      - Thus \[u = v\].
      
    Case 2: \[v \to^* u\]
      - Either v reduces to u or \[u = v\].
      - But v is in normal form. Thus, v cannot be reduced.
      - Thus \[u = v\].

*** Theorem 5: Termination of Evaluation
    \[\forall t \in T\ \exists t' \in T\ ((t \to^* t')(t'\ is\ in\ normal\ form))\]

*** Exercise 1 
    /Suppose we add rule E-FUNNY_1: \[if\ true\ then\ t_2\ else\ t_3 \to t_3\] to language Q. Which theorems still hold?/

    The determinacy of one-step evaluation (theorem 1) breaks, because terms of the form \[if\ true\ then\ p\ else\ q\] can now be evaluated by distinct rules E-IF_TRUE and E-FUNNY_1.
    
    The uniqueness of normal forms (theorem 4) is dependent on theorem 1, so it also breaks.

    Theorem 5 would also hold.

*** Exercise 2 
    /Suppose we add rule E-FUNNY_2: \[\frac{q \to q'}{if\ p\ then\ q\ else\ r \to if\ p\ then\ q'\ else\ r}\] to language Q. Which theorems still hold? Do any proofs need to change?/

    The determinacy of one-step evaluation (theorem 1) breaks, as expressions of the form \[if\ p\ then\ q\ else\ r\], where p and q are not in normal form, can now be evaluated by distinct rules E-IF and E-FUNNY_2.

    Every value would still be in normal form (theorem 2), as the values cannot be evaluated by any rules.

    Similarly, theorem 3 also holds.

    Theorem 4 still holds, surprisingly. However, we need to define it in a way that is independent of theorem 1.
    
** Language Q'
   Language Q' extends the syntax and semantics of language Q

*** Extended Syntax
    \[t ::= ...\ |\ 0\ |\ succ\ t\ |\ pred\ t\ |\ iszero\ t\]
    \[v ::= ...\ |\ n\]
    \[n ::= 0\ |\ succ\ n\]

*** Extended Semantics
    E-SUCC:        \[\frac{t \to t'}{succ\ t \to succ\ t'}\]

    E-PRED_ZERO:   \[pred\ 0 \to 0\]

    E-PRED_SUCC:   \[pred\ (succ\ n) \to n\]

    E-PRED:        \[\frac{t \to t'}{pred\ t \to pred\ t'}\]

    E-ISZERO_ZERO: \[iszero\ 0 \to true\]

    E-ISZERO_SUCC: \[iszero\ (succ\ n) \to false\]
    
    E-ISZERO:      \[\frac{t \to t'}{iszero\ t \to iszero\ t'}\]

*** A Deeper Look
    The definition of metavariable n is quite important to the definition of Q'. It means that terms of the form \[succ\ true\] and are not values. This is important in the definition of our language.
    

* Exercises
** DONE In the [[Concrete Definition: Terms][concrete definition of terms]], what is the size of \[S_3\]?
   We know that \[S_0\] has 0 elements and \[S_1\] has 3 elements.
   \[S_2 = \{true, false,0\} \cup \{succ\ t_1, pred\ t_1, iszero\ t_1\ |\ t_1 \in S_1\} \cup \{if\ t_1\ then\ t_2\ else\ t_3\ |\ t_1, t_2, t_3 \in S_1\}\]

   Thus, \[S_2\] has \[3 + 3 \times |S_1| + |S_1|^3\]
   We can actually generalize and say that \[|S_{i+1}| = 3 + 3 \times |S_i| + |S_i|^3\]

   \[|S_2| = 3 + 3 \times 3 + 3^3 = 39\]
   \[|S_3| = 59439\]

** DONE In the [[Concrete Definition: Terms][concrete definition of terms]], show that the sets \[S_i\] are cumulative.
   We can trivially observe that \[S_0 \subseteq S_1\], i.e. \[\phi \subseteq \{true, false, 0\}\].

   Let \[S_k \subseteq S_{k+1}\] for some \[k > 0\].
   Also, for convenience of notation, let
   - \[q = \{true, false, 0\}\]
   - \[w(S_i) = \{succ\ t_1, pred\ t_1, iszero\ t_1\ |\ t_1 \in S_i\}\]
   - \[y(S_i) = \{if\ t_1\ then\ t_2\ else\ t_3\ |\ t_1, t_2, t_3 \in S_i\}\]

   Now, by definition, 
   \[S_{k + 2} = q \cup w(S_{k + 1}) \cup y(S_{k + 1})\] 
   Let \[S'_k = S_{k + 1} - S_k\].
   Now we can say that

   Let us observe the effect of union on the arguments of w and see if we can find a relation that helps us.
   \[w(Q \cup R) = \{succ\ t_1, pred\ t_1, iszero\ t_1\ |\ t_1 \in Q \cup R\}\]
   \[w(Q \cup R) = \{succ\ t_1, pred\ t_1, iszero\ t_1\ |\ t_1 \in Q\ or\ t_1 \in R\}\]
   \[w(Q \cup R) = \{succ\ t_1, pred\ t_1, iszero\ t_1\ |\ t_1 \in Q\} \cup \{succ\ t_1, pred\ t_1, iszero\ t_1\ |\ t_1 \in R\}\]
   \[w(Q \cup R) = w(Q) \cup w(R)\] ~ Eq. 2

   Now let us observe the effect of union on the arguments of c.
   \[y(Q \cup R) = \{if\ t_1\ then\ t_2\ else\ t_3\ |\ t_1, t_2, t_3 \in Q \cup R\}\]
   \[y(Q \cup R) = \{if\ t_1\ then\ t_2\ else\ t_3\ |\ t_1 \in Q \cup R, t_2 \in Q \cup R, t_3 \in Q \cup R\}\]
   Let's just write the preposition of the value \[y(Q \cup R)\] using r, where \[r(S, q, r, t) = q \in S, r \in S, t \in S\].
   \[r(Q \cup R, t_1, t_2, t_3) = t_1 \in Q \cup R, t_2 \in Q \cup R, t_3 \in Q \cup R\]

   Using boolean addition (or) and multiplication (and), we rewrite this as:
   \[r(Q \cup R, t_1, t_2, t_3) = (t_1 \in Q + t_1 \in R)\ (t_2 \in Q + t_2 \in R)\ (t_3 \in Q + t_3 \in R)\] ~ Eq. 3
   Again, for notational purposes, lets assume:
   - \[a = t_1 \in Q\]
   - \[b = t_1 \in R\]
   - \[c = t_2 \in Q\]
   - \[d = t_2 \in R\]
   - \[e = t_3 \in Q\]
   - \[f = t_3 \in R\]
   Now we can rewrite eq. 3 as:
   \[r(Q \cup R, t_1, t_2, t_3) = (a + b)\ (c + d)\ (e + f)\]
   \[r(Q \cup R, t_1, t_2, t_3) = ace + bce + ade + bde + acf + bcf + adf + bdf\] ~ Eq. 4

   But we know that \[y(Q \cup R) = \{if\ t_1\ then\ t_2\ else\ t_3\ |\ r(Q \cup R, t_1, t_2, t_3)\}\].
   Substituting eq. 4:
   \[\therefore y(Q \cup R) = \{if\ t_1\ then\ t_2\ else\ t_3\ |\ ace + bce + ade + bde + acf + bcf + adf + bdf\}\]
   \[y(Q \cup R) = \{if\ t_1\ then\ t_2\ else\ t_3\ |\ ace\} \cup \{if\ t_1\ then\ t_2\ else\ t_3\ |\ bce + ade + bde + acf + bcf + adf + bdf\}\]
   \[y(Q \cup R) = \{if\ t_1\ then\ t_2\ else\ t_3\ |\ t_1, t_2, t_3 \in Q\} \cup \{if\ t_1\ then\ t_2\ else\ t_3\ |\ bce + ade + bde + acf + bcf + adf + bdf\}\]
   \[y(Q \cup R) = y(Q) \cup \{if\ t_1\ then\ t_2\ else\ t_3\ |\ bce + ade + bde + acf + bcf + adf + bdf\}\] ~ Eq. 5
   
   Substituting eqs. 2 and 5 in 1,
   \[S_{k + 2} = q \cup w(S_k) \cup w(S'_k) \cup y(S_k) \cup \{if\ t_1\ then\ t_2\ else\ t_3\ |\ [Q \mapsto S_k][R \mapsto S'_k](bce + ade + bde + acf + bcf + adf + bdf)\}\]
   But \[S_{k + 1} = q \cup w(S_k) \cup y(S_k)\] by definition.
   Thus, \[S_{k + 2} = S_{k + 1} \cup w(S'_k) \cup \{if\ t_1\ then\ t_2\ else\ t_3\ |\ [Q \mapsto S_k][R \mapsto S'_k](bce + ade + bde + acf + bcf + adf + bdf)\}\]
   \[\therefore \forall k \ge 0\ (S_k \subseteq S_{k + 1} \implies S_{k + 1} \subseteq S_{k + 2})\]

   \[\therefore \forall i \ge 0\ (S_i \subseteq S_{i + 1})\]

** DONE Define multistep evaluation as a set of inference rules.
   See [[Multi-Step Evaluation][here]] for the answer.

** DONE Define a language Q'' to prevent terms from stuck. (Given that Q'' extends Q'.)
   Extended Syntax:

     \[badnat ::= true\ |\ false\ |\ wrong\]
     \[badbool ::= n\ |\ wrong\]
     \[v ::= ...\ |\ wrong\]

   Extended Semantics:

     E-IF_WRONG:     \[if\ badbool\ then\ t_1\ else\ t_2 \to wrong\]
     
     E-SUCC_WRONG:   \[succ\ badnat \to wrong\]

     E-PRED_WRONG:   \[pred\ badnat \to wrong\]

     E-ISZERO_WRONG: \[iszero\ badnat \to wrong\] 
 
** DONE Define big step semantics on language Q'.

   B-VALUE:       \[v \Downarrow v\]

   B-IF_TRUE:     \[\frac{t_1 \Downarrow true, t_2 \Downarrow v_2}{if\ t_1\ then\ t_2\ else\ t_3 \Downarrow\ v_2}\]

   B-IF_FALSE:    \[\frac{t_1 \Downarrow false, t_3 \Downarrow v_3}{if\ t_1\ then\ t_2\ else\ t_3 \Downarrow\ v_3}\]

   B-SUCC:        \[\frac{t_1 \Downarrow n_1}{succ\ t_1 \Downarrow succ\ n_1}\]

   B-PRED_ZERO:   \[\frac{t_1 \Downarrow 0}{pred\ t_1 \Downarrow 0}\]

   B-PRED_SUCC:   \[\frac{t_1 \Downarrow succ\ n_1}{pred\ t_1 \Downarrow n_1}\]

   B-ISZERO_ZERO: \[\frac{t_1 \Downarrow 0}{iszero\ t_1 \Downarrow true}\]

   B-ISZERO_SUCC: \[\frac{t_1 \Downarrow succ\ n_1}{iszero\ t_1 \Downarrow false}\]
   
   /Show that big-step and small-step semantics coincide for this language i.e. \[(t \to^* v) \Leftrightarrow (t \Downarrow v)\]./

   Consider a term t. 

   Case 1: The form of t \[\in \{true, false, 0, succ\ t_1\}\]
     - By small-step semantics, \[t \to^* t\], since multistep evaluation is reflexive.
     - Since t is a value, this follows rule B-VALUE.

   Case 2: t is of the form \[if\ true\ then\ t_2\ else\ t_3\]
     - By E-IF_TRUE, \[t \to^* t_2\].
     - If \[t_2 \to^* v_2\], then since multistep evaluation is transitive, \[t \to^* v_2\]
     - By induction hypothesis, \[(t_2 \to^* v_2) \Leftrightarrow (t_2 \Downarrow v_2)\].
     - Thus, we can apply B-IF_TRUE to get \[t \Downarrow v_2\]

   Case 3: t is of the form \[if\ false\ then\ t_2\ else\ t_3\]
     - By E-IF_FALSE, \[t \to^* t_3\].
     - If \[t_3 \to^* v_3\], then since multistep evaluation is transitive, \[t \to^* v_3\]
     - By induction hypothesis, \[(t_3 \to^* v_3) \Leftrightarrow (t_3 \Downarrow v_3)\].
     - Thus, we can apply B-IF_TRUE to get \[t \Downarrow v_3\]

   Case 4: t is of the form \[if\ t_1\ then\ t_2\ else\ t_3\], \[t_1\] is not in normal form
     - By continuous application E-IF, we can evaluate \[t_1\] to either true or false. Then, case 2 or 3 apply.

   Case 5: t is of the form \[pred\ 0\]
     - By E-PRED_ZERO, \[t \to^* 0\]
     - By B-PRED_ZERO, \[t \Downarrow 0\]

   Case 6: t is of the form \[pred\ (succ\ n_1)\]
     - By E-PRED_SUCC, \[t \to^* n_1\]
     - By B-PRED_SUCC, \[t \Downarrow n_1\]

   Case 7: t is of the form \[pred\ t_1\], where \[t_1\] is not in normal form
     - By E-PRED, we evaluate the case to either case 5 or 6.

   Case 8: t is of the form \[iszero\ 0\]
     - By E-ISZERO_ZERO, \[t \to^* true\]
     - By B-ISZERO_ZERO, \[t \Downarrow true\]

   Case 9: t is of the form \[iszero\ (succ\ n_1)\]
     - By E-ISZERO_SUCC, \[t \to^* false\]
     - By B_ISZERO_SUCC, \[t \Downarrow false\]

   Case 10: t is of the form \[iszero\ t_1\], \[t_1\] is not in normal form
     - By E-ISZERO, case reduces to either case 8 or 9.

** DONE Suppose we want to change our evaluation rules such that the then and else clauses are evaluated before the guard, in that order. How would we do this?
   We would discard rules E-IF_TRUE, E-IF_FALSE and E-IF and replace them with:

   E-IF_TRUE_2: \[if\ true\ then\ v_2\ else\ v_3 \to v_2\]

   E-IF_FALSE_2: \[if\ false\ then\ v_2\ else\ v_3 \to v_3\]

   E-IF_THEN: \[\frac{t_2 \to t_2'}{if\ t_1\ then\ t_2\ else\ t_3 \to if\ t_1\ then\ t_2'\ else\ t_3}\]

   E-IF_ELSE: \[\frac{t_3 \to t_3'}{if\ t_1\ then\ v_2\ else\ t_3 \to if\ t_1\ then\ v_2\ else\ t_3'}\]

   E-IF_FINAL: \[\frac{t_1 \to t_1'}{if\ t_1\ then\ v_2\ else\ v_3 \to if\ t_1'\ then\ v_2\ else\ v_3}\]


* Tangential Topics of Interest
  - Plotkin's /Structural Operational Semantics/ (1981)
  - Kahn's /Natural Semantics/ (1987)
  - Milner's work on CCS (1980, 1989, 1999)


* Footnotes

[fn:1] An abstract state machine is characterized by:
       - A set of states
       - A transition relation that maps states to other states given an input
       - A set of goal states
